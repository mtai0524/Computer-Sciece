@page "/permission"

@using CodeFirst.Data
@using CodeFirst.Models
@using CodeFirst.Models.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject ApplicationDbContext DbContext


<EditForm Model="@permission" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

   <div class="form-group">
        <label for="Type">Type:</label>
        <div class="row">
            <div class="col-12 col-md-6 col-lg-4">
                <select class="form-control" @bind="permission.Type" @bind:event="oninput" @onchange="OnTypeChanged">
                    <option value="branch">Branch</option>
                    <option value="hall">Hall</option>
                    <option value="menu">Menu</option>
                    <option value="service">Service</option>
                </select>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="Roles">Roles:</label>
        @foreach (var role in roles)
        {
            var isChecked = selectedRoleIds.Contains(role.Id);
            <div class="form-check form-switch">
                <input type="checkbox" class="form-check-input" checked="@isChecked" id="@role.Id" @onchange="e => UpdateSelectedRoles(role.Id, e.Value)" />
                <label class="form-check-label" for="@role.Id">
                    <span style="display: inline-block; width: 400px; margin-left: 50px; vertical-align: top;">@role.Name</span>
                </label>
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private Permission permission = new Permission { Type = "branch" }; // Thiết lập mặc định là "branch"
    private List<IdentityRole> roles = new List<IdentityRole>();
    private List<string> selectedRoleIds = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        roles = RoleManager.Roles.ToList();
        await UpdateSelectedRolesForCurrentType(); // Cập nhật danh sách ID vai trò khi khởi tạo
    }

    private async Task UpdateSelectedRolesForCurrentType()
    {
        selectedRoleIds = await GetSelectedRoleIdsFromDatabase(permission.Type);
        StateHasChanged(); // Cập nhật giao diện
    }

    private async Task<List<string>> GetSelectedRoleIdsFromDatabase(string type)
    {
        var permissions = await DbContext.Permission.Where(p => p.Type == type).ToListAsync();
        return permissions.Select(p => p.RoleId).Distinct().ToList();
    }

    private async Task HandleValidSubmit()
    {
        // Xóa tất cả các mục có Type là giá trị được chọn
        var permissionsToRemove = DbContext.Permission.Where(p => p.Type == permission.Type);
        DbContext.Permission.RemoveRange(permissionsToRemove);

        // Thêm các mục mới từ form
        foreach (var roleId in selectedRoleIds)
        {
            var newPermission = new Permission
                {
                    Type = permission.Type, // Thiết lập Type là giá trị được chọn
                    RoleId = roleId
                };

            DbContext.Permission.Add(newPermission);
        }

        await DbContext.SaveChangesAsync();
    }

    private async Task OnTypeChanged(ChangeEventArgs e)
    {
        permission.Type = e.Value.ToString();
        await UpdateSelectedRolesForCurrentType();
    }

    private void UpdateSelectedRoles(string roleId, object isChecked)
    {
        if ((bool)isChecked)
        {
            if (!selectedRoleIds.Contains(roleId))
            {
                selectedRoleIds.Add(roleId);
            }
        }
        else
        {
            if (selectedRoleIds.Contains(roleId))
            {
                selectedRoleIds.Remove(roleId);
            }
        }
    }
}

<style>
    .form-check-input[type=checkbox] {
        width: 0;
        height: 0;
        visibility: hidden;
        border: 4px solid black;
        margin-top: 5px;
    }

    .form-check-label {
        margin-top:5px;
        border: 4px solid black;
        cursor: pointer;
        position: relative;
        display: inline-block;
        width: 40px;
        height: 20px;
        background-color: #ccc;
        border-radius: 20px;
        transition: background-color 0.3s ease;
    }

    .form-check-input[type=checkbox]:checked + .form-check-label {
        background-color: #94de94ff;
        border:4px solid black;
    }

    .form-check-label::after {
        border: 4px solid black;
        content: '';
        position: absolute;
        width: 22px;
        height: 22px;
        border-radius: 50%;
        background-color: white;
        top: -4px;
        left: -4px;
        transition: transform 0.3s ease;
    }

    .form-check-label:hover{
        background-color: #ccc;
    }
    .form-check-input[type=checkbox]:checked + .form-check-label::after {
        transform: translateX(20px);
    }
</style>
