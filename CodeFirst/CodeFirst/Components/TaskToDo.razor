@page "/task"
@using CodeFirst.Data
@using CodeFirst.Hubs
@using CodeFirst.Models.Entities
@using CodeFirst.Service
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JSRuntime
@inject ProjectService _projectService
@inject TaskToDoService _taskService
@inject NavigationManager NavigationManager
@inject IHubContext<MyBlazorHub> _hubContext

@code {
    static int changeCounter = 0;
    public async Task UpdateStateAndSortTasks()
    {
        projectList.Clear();
        tasks.Clear();
        changeCounter++;
        projectList = _context.Projects.ToList();
        foreach (var project in projectList)
        {
            var tasksForProject = _context.TaskToDo.Where(t => t.ProjectId == project.ProjectId).OrderBy(t => t.Position).ToList();
            project.TaskToDoProp = tasksForProject;
        }

        _context.SaveChanges();
        StateHasChanged();

    }


    public async Task DeleteProject(int projectId)
    {
        var project = await _context.Projects.FindAsync(projectId);
        if (project != null)
        {
            var tasksToDel = _context.TaskToDo.AsNoTracking().Where(x => x.ProjectId == projectId).ToList();
            _context.TaskToDo.RemoveRange(tasksToDel);
            _context.Projects.Remove(project);
            await _context.SaveChangesAsync();
            await LoadProject();
        }
    }

    private async Task CreateProject()
    {
        var project = new Project { Name = projectName };

        _context.Projects.Add(project);
        await _context.SaveChangesAsync();
        await LoadProject();

    }
    private string taskName;
    private int currentProjectId;
    private async Task SaveTask()
    {
        // Lấy vị trí của task cuối cùng của dự án hiện tại
        var lastTask = _context.TaskToDo
                                 .Where(t => t.ProjectId == currentProjectId)
                                 .OrderByDescending(t => t.Position)
                                 .FirstOrDefault();

        if (lastTask == null)
        {
            // Nếu không có task nào tồn tại trong dự án, tạo một task mới với vị trí là 1
            lastTask = new CodeFirst.Models.Entities.TaskToDo
                {
                    Position = -1
                };
        }
        // Tạo một task mới với vị trí tự động tăng
        var task = new CodeFirst.Models.Entities.TaskToDo
            {
                Name = taskName,
                Position = lastTask.Position + 1,
                ProjectId = currentProjectId
            };

        // Thêm task vào cơ sở dữ liệu
        _context.TaskToDo.Add(task);
        await _context.SaveChangesAsync();
        await LoadProject();
    }


    private async Task ShowAddTaskModal(int projectId)
    {
        currentProjectId = projectId;
    }
   
}
<div class='app'>
    <div class='project'>
        <div class='project-info'>
            <div class="modal fade" id="createProjectModal" tabindex="-1" aria-labelledby="createProjectModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="createProjectModalLabel">Create Project</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="name">Name:</label>
                                <input type="text" class="form-control" id="name" @bind="projectName">
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary" @onclick="CreateProject">Create</button>
                        </div>
                    </div>
                </div>
            </div>

            <h3>Quản lý công việc</h3>

            <div class='project-participants'>
                @*  <span></span>
                <span></span>
                <span></span>
                <button class='project-participants__add'>Add Participant</button> *@
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createProjectModal">Thêm dự án</button>
                <button type="submit" class="btn btn-primary" @onclick="UpdateStateAndSortTasks">Update]</button>
            </div>
        </div>
        <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Add Task</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="text" class="form-control" id="taskName" @bind="taskName" placeholder="Task Name">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveTask">Save</button>
                    </div>
                </div>
            </div>
        </div>

        <div class='project-tasks' id='project-tasks'>
            @foreach (var project in projectList)
            {
                <div class="container-flex-col" @key="@project.ProjectId">
                    <div class='project-column-heading' draggable='false'>
                        <h2 class='project-column-heading__title' draggable='false'>@project.Name</h2>
                        <button class='project-column-heading__options' draggable='false' @onclick="() => DeleteProject(project.ProjectId)">
                            <i class="fas fa-ellipsis-h" draggable='false'></i>
                        </button>
                    </div>
                    <div class='project-column' data-project-id="@project.ProjectId" @key="@changeCounter">

                        @foreach (var task in project.TaskToDoProp.Where(t=> @project.ProjectId == t.ProjectId).OrderBy(t => t.Position))
                        {
                                <div class='task' draggable='true' data-task-id="@task.TaskId" @key="@task.TaskId">
                                    <div class='task__tags'>
                                        <span class='task__tag task__tag--copyright' @key="@task.ProjectId">@task.ProjectId</span>
                                        <button class='task__options'>
                                            <i class="fas fa-ellipsis-h"></i>
                                        </button>
                                    </div>
                                    <p>@task.Name</p>
                                    <div class='task__stats'>
                                        <span>
                                            <time datetime="2021-11-24T20:00:00">
                                                <i class="fas fa-flag"></i>Nov 24
                                            </time>
                                        </span>
                                        <span><i class="fas fa-comment"></i>3</span>
                                        <span><i class="fas fa-paperclip"></i>@task.Position</span>
                                        <span class='task__owner' @key=@task.Position></span>
                                    </div>
                                </div>
                          
                        }
                    </div>
                    <button class="add-task-button" data-bs-toggle="modal" data-bs-target="#taskModal" @onclick="() => ShowAddTaskModal(project.ProjectId)">Add Task</button>
                </div>
            }


        </div>


    </div>
</div>
@code {
    List<Project> projectList { get; set; } = new List<Project>();
    List<CodeFirst.Models.Entities.TaskToDo> tasks { get; set; } = new List<CodeFirst.Models.Entities.TaskToDo>();
    [Inject] private ApplicationDbContext _context { get; set; }
    string projectName;

    async Task LoadProject()
    {
        projectList = _context.Projects.ToList();
        foreach (var project in projectList)
        {
            var tasksForProject = _context.TaskToDo.Where(t => t.ProjectId == project.ProjectId).OrderBy(t => t.Position).ToList();
            project.TaskToDoProp = tasksForProject;
        }
        await _hubContext.Clients.All.SendAsync("ProjectCreated", projectList);
    }
    public async Task Init()
    {
        hubConnection = new HubConnectionBuilder()
           // .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost/chatHub")) // docker
           .WithUrl(NavigationManager.ToAbsoluteUri("/myBlazorHub"))
           .Build();

        hubConnection.On<List<Project>>("ProjectCreated", receivedProducts =>
        {
            InvokeAsync(() =>
            {
                projectList = receivedProducts;
                StateHasChanged();
            });
        });

        try
        {
            await hubConnection.StartAsync();

        }
        catch (Exception ex)
        {
        }
        await base.OnInitializedAsync();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await UpdateState();
    //     }
    //     await UpdateState();
    // }

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // Cập nhật danh sách công việc cho mỗi dự án
        await Init();
        await UpdateStateAndSortTasks();
}
}