@page "/task"
@using CodeFirst.Data
@using CodeFirst.Hubs
@using CodeFirst.Models
@using CodeFirst.Models.Entities
@using CodeFirst.Service
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JSRuntime
@inject ProjectService _projectService
@inject UserBlazorService _userBlazorService
@inject TaskToDoService _taskService
@inject NavigationManager NavigationManager
@inject IHubContext<MyBlazorHub> _hubContext
@inject ISnackbar SnackbarService
@inject ISnackbar Snackbar
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<style>
    .mud-icon-size-small {
        font-size: 1rem;
        color: #211d01ff;
    }

    .avatar-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .avatar-option {
        display: none; /* ẩn dấu tròn của radio button */
    }

    .avatar-option-label {
        cursor: pointer;
        margin: 10px;
    }

        .avatar-option-label img {
            border-radius: 50%;
            border: 3px solid transparent;
            width: 40px;
            height: 40px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease, transform 0.3s ease;
            padding: 4px;
        }

    .avatar-option:checked + .avatar-option-label img {
        border: 2px dashed gray;
        transform: scale(0.5);
    }

    label:hover {
        background-color: transparent;
    }

    textarea::-webkit-scrollbar {
        display: none;
    }

    textarea {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    .mud-chip-content {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

</style>


@* func task *@
@code {
    List<UserListTask> userTaskList { get; set; } = new List<UserListTask>();

    private async Task SaveTask()
    {

        // Lấy vị trí của task cuối cùng của dự án hiện tại
        var lastTask = _context.TaskToDo
                                 .Where(t => t.ProjectId == currentProjectId)
                                 .OrderByDescending(t => t.Position)
                                 .FirstOrDefault();

        if (lastTask == null)
        {
            // Nếu không có task nào tồn tại trong dự án, tạo một task mới với vị trí là -1
            lastTask = new CodeFirst.Models.Entities.TaskToDo
                {
                    Position = -1
                };
        }
        // Tạo một task mới với vị trí tự động tăng
        var task = new CodeFirst.Models.Entities.TaskToDo
            {
                Name = taskName,
                Position = lastTask.Position + 1,
                ProjectId = currentProjectId,
                CreatedAt = DateTime.Now,
                UserId = currUser.Id,
                Priority = selectedColor,
                TaskColor = taskColor,
            };

        _context.TaskToDo.Add(task);
        await _context.SaveChangesAsync();
        Snackbar.Add("Đã thêm!", Severity.Normal);
        int newTaskId = task.TaskId;
        userTaskList.Clear();

        if(values != null)
        {
            foreach (var item in values)
            {
                UserListTask newUserListTask = new UserListTask
                    {
                        TaskId = newTaskId,
                        UserId = item
                    };
                userTaskList.Add(newUserListTask);
            }
            _context.UserListTask.AddRange(userTaskList);
            await _context.SaveChangesAsync();
        }
    
        await LoadProject();
    }
    public async Task DeleteTask(int taskId)
    {

        var task = await _context.TaskToDo.FindAsync(taskId);
        if (task != null)
        {
            _context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;

            var userListTask = await _context.UserListTask
                                       .Where(x => x.TaskId == taskId)
                                       .Select(x => x.UserListTaskId)
                                       .ToListAsync();

            _context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.TrackAll;

            // Xóa các công việc theo danh sách ID
            _context.UserListTask.RemoveRange(_context.UserListTask.Where(t => userListTask.Contains(t.UserListTaskId)));

            _context.TaskToDo.Remove(task);
            await _context.SaveChangesAsync();
            await LoadProject();
        }
        Snackbar.Add("Đã xóa!", Severity.Normal);

    }

    CodeFirst.Models.Entities.TaskToDo taskToUpdate { get; set; } = new Models.Entities.TaskToDo();
    // update task

    private async Task AdjustTextareaHeight()
    {
        await JSRuntime.InvokeVoidAsync("adjustTextareaHeight", "taskName");
    }
    private async Task ShowAddTaskModal(int projectId)
    {
        currentProjectId = projectId;
    }

    string taskNameUpdate = "";

    async Task ConfirmDeleteTask(int taskId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Dữ liệu sau khi xóa sẽ không thể khôi phục");
        if (confirmed)
        {
            await DeleteTask(taskId);
        }
        else
        {
        }
    }
}

@* func project *@
@code {
    private async Task CreateProject()
    {

        var project = new Project { Name = projectName, IconColor = selectedColorProject };

        _context.Projects.Add(project);
        await _context.SaveChangesAsync();
        await LoadProject();
        Snackbar.Add("Đã thêm!", Severity.Normal);
    }

    public async Task DeleteProject(int projectId)
    {
        var project = await _context.Projects.FindAsync(projectId);
        if (project != null)
        {
            _context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;

            var taskIds = await _context.TaskToDo
                                        .Where(x => x.ProjectId == projectId)
                                        .Select(x => x.TaskId)
                                        .ToListAsync();
            var userListTask = await _context.UserListTask
                                 .Where(x => taskIds.Contains(x.TaskId.Value)) // Sử dụng x.TaskId.Value để truy cập giá trị int thực sự
                                 .ToListAsync();
            _context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.TrackAll;

            // Xóa các công việc theo danh sách ID
            _context.TaskToDo.RemoveRange(_context.TaskToDo.Where(t => taskIds.Contains(t.TaskId)));
            _context.UserListTask.RemoveRange(userListTask);
            _context.Projects.Remove(project);
            await _context.SaveChangesAsync();
            await LoadProject();
            Snackbar.Add("Đã xóa!", Severity.Normal);
        }
    }


    private async Task ShowAddProjectModal()
    {
        IsRedChecked = false;
        IsYellowChecked = false;
        IsBlackChecked = false;
    }

    async Task ConfirmDeleteProject(int projectId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Dữ liệu sau khi xóa sẽ không thể khôi phục");
        if (confirmed)
        {
            await DeleteProject(projectId);
        }
        else
        {
        }
    }

        // update project

}


@* main UI *@
<div class='app'>
    <div class='project'>
        <div class='project-info'>
            <h3>Quản lý công việc</h3>
            <div class='project-participants'>
                @*  <span></span>
                <span></span>
                <span></span>
                <button class='project-participants__add'>Add Participant</button> *@
                <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#createProjectModal" @onclick="ShowAddProjectModal">Thêm dự án</button>
                <button style="margin-left:6px" type="submit" class="btn btn-outline-primary" @onclick="UpdateStateAndSortTasks">Đồng bộ</button>
            </div>
        </div>
        <div class='project-tasks' id='project-tasks'>
            @foreach (var project in projectList)
            {
                <div class="container-flex-col" @key="@project.ProjectId">
                    <div class='project-column-heading' draggable='false'>
                        <div style="overflow: hidden;border-radius:8px;text-overflow: ellipsis;white-space: nowrap;">
                            <MudChip Style="max-width: 270px;overflow: hidden;text-overflow: ellipsis;white-space: nowrap"><span style="font-size:17px">@project.Name</span></MudChip>
                        </div>
                        <div class="dropdown">
                            <button class='project-column-heading__options' draggable='false' id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-h" draggable='false'></i>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 1px, rgb(51, 51, 51) 0px 0px 0px 1px;">
                                <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#editProjectModal" @onclick="()=> EditProject(project.ProjectId)" href="#">Cập nhật</a></li>
                                <li>
                                    <a class="dropdown-item" @onclick="()=> ConfirmDeleteProject(project.ProjectId)" style="cursor: pointer;"><span style="color:red"><i class="fa-solid fa-trash"></i> Xóa dự án</span></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="container-task-button">

                        <div class='project-column' data-project-id="@project.ProjectId" @key="@changeCounter">
                            @{
                                tasks = _taskService.GetListTaskByProjectId(project.ProjectId).OrderBy(t => t.Position).ToList();
                            }
                            @foreach (var task in tasks)
                            {
                                if (task != null)
                                {
                                    <div class='task' draggable='true' data-task-id="@task.TaskId" @key="@task.TaskId" style="border:4px solid @task.TaskColor">
                                        <div class='task__tags' @key="@task.TaskColor">
                                            @if (task.Priority != null)
                                            {
                                                if (task.Priority.Contains("task__tag--not-ready"))
                                                {
                                                    <span class='task__tag @task.Priority' @key="@task.ProjectId">chưa bắt đầu</span>
                                                }
                                                if (task.Priority.Contains("task__tag--illustration"))
                                                {
                                                    <span class='task__tag @task.Priority' @key="@task.ProjectId">bắt đầu</span>
                                                }
                                                if (task.Priority.Contains("task__tag--copyright"))
                                                {
                                                    <span class='task__tag @task.Priority' @key="@task.ProjectId">quan trọng</span>
                                                }
                                                if (task.Priority.Contains("task__tag--design"))
                                                {
                                                    <span class='task__tag @task.Priority' @key="@task.ProjectId">đang làm</span>
                                                }
                                            }
                                            <div class="dropdown">
                                                <button class='task__options' draggable='false' id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="fas fa-ellipsis-h" draggable='false'></i>
                                                </button>
                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 1px, rgb(51, 51, 51) 0px 0px 0px 1px;">
                                                    <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#taskDetailsModal" @onclick="() => EditTaskToDo(task.TaskId)" href="#">Cập nhật</a></li>
                                                    <li>
                                                        <a class="dropdown-item" @onclick="()=> ConfirmDeleteTask(task.TaskId)" style="cursor: pointer;"><span style="color:red"><i class="fa-solid fa-trash"></i> Xóa nhiệm vụ</span></a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                        <p>@task.Name</p>
                                        <div class='task__stats'>
                                            <span>
                                                <time datetime="2021-11-24T20:00:00">
                                                    <i class="fas fa-flag"></i> @task.CreatedAt?.ToString("dd MM")
                                                </time>
                                            </span>
                                            <span><i class="fas fa-comment"></i> 3</span>
                                            <span style="visibility:hidden"><i class="fas fa-paperclip"></i></span>
                                            <span class='task__owner'><img style="width:100%;height:100%;border-radius:50%" src="@task.User.Avatar" alt="Avatar" /></span>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        <button class="add-task-button" data-bs-toggle="modal" data-bs-target="#taskModal" @onclick="() => ShowAddTaskModal(project.ProjectId)">Add Task</button>
                    </div>

                </div>
            }
        </div>
    </div>
</div>

@* modal create task *@
<div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalLabel">Add Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="createTaskName">Name:</label>
                <input type="text" id="createTaskName" class="form-control" @bind="taskName" placeholder="Task Name">
                <label>Select Tag Color:</label>
                <MudChipSet MultiSelection="false">
                    <MudChip Text="chưa bắt đầu" Color="Color.Dark" @onclick='() => SelectColor("task__tag--not-ready")' Variant="MudBlazor.Variant.Text">chưa bắt đầu</MudChip>
                    <MudChip Text="bắt đầu" Color="Color.Success" @onclick='() => SelectColor("task__tag--illustration")' Variant="MudBlazor.Variant.Text">bắt đầu</MudChip>
                    <MudChip Text="quan trọng" Color="Color.Secondary" @onclick='() => SelectColor("task__tag--copyright")' Variant="MudBlazor.Variant.Text">quan trọng</MudChip>
                    <MudChip Text="đang làm" Color="Color.Primary" @onclick='() => SelectColor("task__tag--design")' Variant="MudBlazor.Variant.Text">đang làm</MudChip>
                </MudChipSet>
                <div class="rz-p-sm-12 rz-text-align-center">
                    <RadzenLabel Text="Chọn thành viên" Component="DropDownMultipleChips" Style="margin-right: 8px; vertical-align: middle;" />
                    <RadzenDropDown @bind-Value=@values Data=@userList TextProperty="Email" ValueProperty="Id" Name="DropDownMultipleChips" MaxSelectedLabels="6" SelectedItemsText="được chọn"
                                    Multiple=true AllowClear=true SelectAllText="Chọn tất cả" Placeholder="Chọn thành viên tham gia" Chips=true Filterable=true
                                    Style="width: 100%;margin:0 0 0 0">
                        <Template Context="item">
                            <div class="rz-chip" style="margin: 2px; background-color: #f0f0f0; padding: 2px 8px; border-radius: 15px; display: inline-flex; align-items: center;">
                                <span style="font-size:12px;margin-right:5px">@item.Email</span>
                                <img src="@item.Avatar" style="border-radius:5px;width: 20px; height: 20px; margin: 4px;" />
                            </div>
                        </Template>
                    </RadzenDropDown>
                </div>


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="SaveTask">Save</button>
            </div>
        </div>
    </div>
</div>
<style>
    .rz-multiselect-panel {
        z-index: 10000000000000 !important;
    }
</style>
@code {
    List<string> values = new List<string>(); // Giả sử Id là kiểu string


}

@* modal update task *@
<div class="modal fade" id="taskDetailsModal" tabindex="-1" aria-labelledby="taskDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
            <div class="modal-header">
                <h5 class="modal-title" id="taskDetailsModalLabel">Chỉnh sửa nhiệm vụ</h5>
                <button type="button" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="taskName">Task Name:</label>
                    <textarea class="form-control" id="taskName" @bind="@updateTaskName" cols="100" style="resize: none;height: 35px; min-height: 35px; overflow: auto;" @oninput="AdjustTextareaHeight"></textarea>

                    <label>Select Tag Color:</label>
                    <MudChipSet MultiSelection="false">
                        <MudChip Text="chưa bắt đầu" Color="Color.Dark" @onclick='() => SelectColor("task__tag--not-ready")' Variant="MudBlazor.Variant.Text">chưa bắt đầu</MudChip>
                        <MudChip Text="bắt đầu" Color="Color.Success" @onclick='() => SelectColor("task__tag--illustration")' Variant="MudBlazor.Variant.Text">bắt đầu</MudChip>
                        <MudChip Text="quan trọng" Color="Color.Secondary" @onclick='() => SelectColor("task__tag--copyright")' Variant="MudBlazor.Variant.Text">quan trọng</MudChip>
                        <MudChip Text="đang làm" Color="Color.Primary" @onclick='() => SelectColor("task__tag--design")' Variant="MudBlazor.Variant.Text">đang làm</MudChip>
                    </MudChipSet>
                    @if (Users != null)
                    {

                            @foreach (var user in Users)
                            {
                                <div class="rz-chip" style="margin: 2px; background-color: #f0f0f0; padding: 2px 8px; border-radius: 15px; display: inline-flex; align-items: center;">
                                    <span style="font-size:12px;margin-right:5px">@user.Email</span>
                                    <img src="@user.Avatar" style="border-radius:5px;width: 20px; height: 20px; margin: 4px;" />
                                </div> <br />
                            }
                    }

                </div>
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-placement="left" title="Xóa dữ liệu và đóng form" data-bs-dismiss="modal"><i class="fa-solid fa-caret-left" style="margin-right:5px"></i> Hủy</button>
                <button type="button" class="btn btn-primary" @onclick="SaveEditTaskChanges">Save</button>
            </div>
        </div>
    </div>
</div>
@code {
    protected List<ApplicationUser>? Users { get; set; }
    CodeFirst.Models.Entities.TaskToDo? taskToDoModel { get; set; } = new CodeFirst.Models.Entities.TaskToDo();

    string? updateTaskName = "";
    async Task EditTaskToDo(int taskId)
    {
        Users = await _context.UserListTask
                               .Where(ult => ult.TaskId == taskId)
                               .Select(ult => ult.User)
                               .ToListAsync();
        taskToDoModel = await _context.TaskToDo.FindAsync(taskId);
        CodeFirst.Models.Entities.TaskToDo? taskUpdateForm = _context.TaskToDo.FirstOrDefault(x => x.TaskId == taskId);
        if (taskUpdateForm != null)
        {
            updateTaskName = taskUpdateForm.Name;
        }
        await LoadProject();

    }
    async Task SaveEditTaskChanges()
    {
        var existingTask = _context.TaskToDo.Local.FirstOrDefault(b => b.TaskId == taskToDoModel.TaskId);

        if (existingTask != null)
        {
            existingTask.Name = updateTaskName;
            existingTask.TaskColor = selectedColorTask;

            // Cập nhật Priority dựa trên selectedColorTask
            if (selectedColorTask.Contains("#d6ede2"))
            {
                taskToDoModel.Priority = "task__tag--illustration";
            }
            else if (selectedColorTask.Contains("#f2dcf5"))
            {
                taskToDoModel.Priority = "task__tag--copyright";
            }
            else if (selectedColorTask.Contains("#ceecfd"))
            {
                taskToDoModel.Priority = "task__tag--design";
            }
            else if (selectedColorTask.Contains("#a19ec1ff"))
            {
                taskToDoModel.Priority = "task__tag--not-ready";
            }
            await LoadProject();
        }
        else
        {
            taskToDoModel.Name = updateTaskName;
            taskToDoModel.TaskColor = selectedColorTask;

            // Cập nhật Priority dựa trên selectedColorTask
            if (selectedColorTask.Contains("#d6ede2"))
            {
                taskToDoModel.Priority = "task__tag--illustration";
            }
            else if (selectedColorTask.Contains("#f2dcf5"))
            {
                taskToDoModel.Priority = "task__tag--copyright";
            }
            else if (selectedColorTask.Contains("#ceecfd"))
            {
                taskToDoModel.Priority = "task__tag--design";
            }
            else if (selectedColorTask.Contains("#a19ec1ff"))
            {
                taskToDoModel.Priority = "task__tag--not-ready";
            }
        }

        _context.Update(taskToDoModel);

        await _context.SaveChangesAsync();
        Snackbar.Add("Đã cập nhật!", Severity.Normal);
        await LoadProject();
    }

}

@* modal create project *@
<div class="modal fade" id="createProjectModal" tabindex="-1" aria-labelledby="createProjectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createProjectModalLabel">Create Project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="name">Name:</label>
                    <input type="text" class="form-control" id="name" @bind="projectName" required>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" @onclick="CreateProject">Create</button>
            </div>
        </div>
    </div>
</div>


@* modal edit project *@
<div class="modal fade" id="editProjectModal" tabindex="-1" aria-labelledby="editProjectModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
            <div class="modal-header">
                <h5 class="modal-title" id="editProjectModalLabel">Chỉnh sửa dự án</h5>
                <button type="button" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                </button>
            </div>
            <div class="modal-body">
                <form method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="projectName" class="form-label">Tên dự án</label>
                        <input type="text" class="form-control" @bind="@updateProjectName">
                    </div>
                </form>
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-placement="left" title="Xóa dữ liệu và đóng form" data-bs-dismiss="modal"><i class="fa-solid fa-caret-left" style="margin-right:5px"></i> Hủy</button>
                <a class="btn btn-success" @onclick="SaveEditProjectChanges">
                    <i class="fa-solid fa-plus" style="color: white; margin-right:5px"></i>
                    <span>Lưu</span>
                </a>
            </div>
        </div>
    </div>
</div>
@code {
    string? updateProjectName = "";
    CodeFirst.Models.Entities.Project? projectToDoModel { get; set; } = new CodeFirst.Models.Entities.Project();

    async Task EditProject(int projectId)
    {
        projectToDoModel = await _context.Projects.FindAsync(projectId);
        Project? projectUpdateForm = _context.Projects.FirstOrDefault(x => x.ProjectId == projectId);
        if (projectUpdateForm != null)
        {
            updateProjectName = projectUpdateForm.Name;
        }
    }
    async Task SaveEditProjectChanges()
    {
        var existingProject = _context.Projects.Local.FirstOrDefault(b => b.ProjectId == projectToDoModel.ProjectId);

        if (existingProject != null)
        {
            existingProject.Name = updateProjectName;
        }
        else
        {
            _context.Attach(projectToDoModel);
            projectToDoModel.Name = updateProjectName;
        }
        _context.Update(projectToDoModel);

        await _context.SaveChangesAsync();
        await LoadProject();
        Snackbar.Add("Đã cập nhật!", Severity.Normal);

    }
}

@* main code *@
@code {
    public async Task UpdateStateAndSortTasks()
    {
        projectList.Clear();
        tasks.Clear();
        changeCounter++;
        projectList = await _projectService.GetAllProjects();
        _context.SaveChanges();
        StateHasChanged();
    }
    async Task LoadProject()
    {
        projectList = await _projectService.GetAllProjects();

        await _hubContext.Clients.All.SendAsync("ProjectCreated", projectList);
    }
    public async Task Init()
    {
        hubConnection = new HubConnectionBuilder()
           // .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost/chatHub")) // docker
           .WithUrl(NavigationManager.ToAbsoluteUri("/myBlazorHub"))
           .Build();

        hubConnection.On<List<Project>>("ProjectCreated", receivedProducts =>
        {
            InvokeAsync(() =>
            {
                projectList = receivedProducts;
                StateHasChanged();
            });
        });
        try
        {
            await hubConnection.StartAsync();

        }
        catch (Exception ex)
        {
        }
        await base.OnInitializedAsync();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await UpdateState();
    //     }
    //     await UpdateState();
    // }


    protected override async Task OnInitializedAsync()
    {
        userList = await _context.ApplicationUser.ToListAsync();

        currUser = await _userBlazorService.GetCurrentUser();
        // Cập nhật danh sách công việc cho mỗi dự án
        await Init();
        await UpdateStateAndSortTasks();
    }
}

@* define variable *@
@code {
    List<ApplicationUser> userList;
    List<Project> projectList { get; set; } = new List<Project>();
    List<CodeFirst.Models.Entities.TaskToDo> tasks { get; set; } = new List<CodeFirst.Models.Entities.TaskToDo>();
    [Inject] private ApplicationDbContext _context { get; set; }
    string projectName;
    private HubConnection hubConnection;
    ApplicationUser? currUser;
    int projectIdCurr = 0;

}
@code {
    static int changeCounter = 0;
    private string taskName;
    private int currentProjectId;
    string taskColor = "";
    string selectedColor = "task__tag--copyright";
    CodeFirst.Models.Entities.TaskToDo? selectedTask { get; set; } = new Models.Entities.TaskToDo();
}
@code {
    private string selectedColorProject = "";
    private string selectedColorTask = "";
    private bool IsRedChecked = true;
    private bool IsYellowChecked = false;
    private bool IsBlackChecked = false;
    private void SetColor(string color)
    {
        selectedColorProject = color;
        // Đặt lại giá trị checked cho tất cả các radio buttons về false
        IsRedChecked = color == "red";
        IsYellowChecked = color == "yellow";
        IsBlackChecked = color == "black";
        taskColor = color;
    }
}

@code {
    private void SelectColor(string color)
    {
        selectedColor = color;
        selectedColorTask = color;
        if (selectedColorTask.Contains("illustration"))
        {
            selectedColorTask = "#d6ede2";
        }
        if (selectedColorTask.Contains("copyright"))
        {
            selectedColorTask = "#f2dcf5";
        }
        if (selectedColorTask.Contains("design"))
        {
            selectedColorTask = "#ceecfd";
        }
        if (selectedColorTask.Contains("not-ready"))
        {
            selectedColorTask = "#a19ec1ff";
        }
        taskColor = selectedColorTask;
    }
}