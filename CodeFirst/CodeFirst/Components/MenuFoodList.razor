@page "/menu-list"
@using CloudinaryDotNet
@using CloudinaryDotNet.Actions
@using CodeFirst.Data
@using CodeFirst.Hubs
@using CodeFirst.Models
@using CodeFirst.Models.Entities
@using CodeFirst.Service
@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject CloudinaryService _cloudinaryService;
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
<PageTitle>Branches management</PageTitle>
<Preload />
@using BlazorBootstrap

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
@inject ISnackbar SnackbarService
@inject ISnackbar Snackbar
@inject IHubContext<MyBlazorHub> _hubContext
@inject CodeFirst.Service.NotificationService _notiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserBlazorService _userBlazorService
@inject AuthorizeService _authorizeService

@code {
    [Inject] protected PreloadService PreloadService { get; set; }

    private List<MudBlazor.BreadcrumbItem> _items = new List<MudBlazor.BreadcrumbItem>
    {
        new MudBlazor.BreadcrumbItem("Trang chủ", href: "/", icon: Icons.Material.Filled.Home),
        new MudBlazor.BreadcrumbItem("Thực đơn", href: "/menu-list", icon: Icons.Material.Filled.FoodBank),
    };
}
<MudTabs Elevation="1" Rounded="true" PanelClass="pa-3">
    <MudTabPanel Text="Thực đơn" ToolTip="Danh sách thực đơn">

<style>
    .btn {
        color: white;
        margin-left: 5px;
        outline: none;
    }

        .btn:hover {
            color: white;
        }

    i {
        margin-right: 3px;
    }

    label:hover {
        background-color: transparent;
    }
    .mud-table{
        border: 3px solid black;
    }
</style>




<div class="modal fade" id="createHallModal" tabindex="-1" aria-labelledby="createHallModalLabel" aria-hidden="true" @onclick="() => CloseMe(false)">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
            <div class="modal-header">
                <h5 class="modal-title" id="createHallModalLabel">Thêm món mới</h5>
                <button type="button" @onclick="() => CloseMe(false)" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                </button>
            </div>
               @if (CanAdd)
            {

            <div class="modal-body">
                @if (showAlertCreateBranch)
                {
                    <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Tạo thành công!</MudAlert>
                }
                @if (showAlert)
                {
                    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" IsOpen="@showAlert" CloseIconClicked="() => showAlert = false">
                        Vui lòng nhập đầy đủ thông tin!
                    </MudAlert>
                }

                <form method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="branchName" class="form-label">Tên món</label>
                        <input type="text" class="form-control" id="branchName" @bind="BranchName">
                    </div>
                    <div class="mb-3">
                        <label for="branchDescription" class="form-label">Mô tả</label>
                        <textarea class="form-control" id="branchDescription" rows="3" @bind="BranchDescription"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="hallPrice" class="form-label">Giá</label>
                        <input type="number" class="form-control" id="hallPrice" rows="3" @bind="HallPrice"></input>
                    </div>
                    <div class="mb-3">
                        <label for="branchImage" class="form-label">Ảnh</label>
                        <InputFile id="branchImage" class="form-control" OnChange="OnInputFileChange" />
                    </div>
                    <div class="mb-3">
                        <label for="branchId" class="form-label">Chọn thể loại</label>
                        <select class="form-control" id="branchId" @bind="SelectedBranchId">
                            @foreach (var branch in selectBranches)
                            {
                                <option value="@branch.CategoryId">@branch.Name</option>
                            }
                        </select>
                    </div>
                </form>

            </div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" @onclick="CancelAndDelData" data-bs-toggle="tooltip" data-bs-placement="left" title="Xóa dữ liệu và đóng form" data-bs-dismiss="modal"><i class="fa-solid fa-caret-left" style="margin-right:5px"></i> Hủy</button>
                <a class="btn btn-success" @onclick="CreateBranch">
                    @if (isLoading)
                    {
                        <i class="fa-solid fa-spinner fa-spin" style="color: white; margin-right:5px"></i>
                        <span>Đang tải... </span>
                    }
                    else if (isSavedSuccessfully)
                    {
                        <i class="fa-solid fa-check" style="color: white; margin-right:5px"></i>
                        <span>Đã lưu thành công!</span>
                    }
                    else if (isError)
                    {
                        <i class="fa-solid fa-ban" style="margin-right:5px"></i>
                        <span>Bị lỗi hình ảnh!</span>
                    }
                    else
                    {
                        <i class="fa-solid fa-plus" style="color: white; margin-right:5px"></i>
                        <span>Lưu</span>
                    }
                </a>

            </div>
            }
                    else
                    {
                        <span style="color:red;margin:10px">Không có quyền thêm</span>
                    }
        </div>
    </div>
</div>


@* alert *@
@code {
    private bool showAlertCreateBranch = false;

    private async Task CloseMe(bool value)
    {
        if (!value)
        {
            showAlertCreateBranch = false;
            isSavedSuccessfully = false;
            // string newUrl = $"/branch-list";
            // await jsRuntime.InvokeVoidAsync("history.pushState", null, null, newUrl);
        }
    }

    private void ShowAlerts()
    {
        showAlertCreateBranch = true;
    }
}


 @code {
    double? HallPrice { get; set; }
 }


@* create branch code behind *@
@code {
    private string? BranchName { get; set; }
    private string? BranchDescription { get; set; }
    private bool showAlert = false;
    private IBrowserFile BranchImageFile { get; set; }
    string imgURL = "";
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        BranchImageFile = e.File;
    }
    bool isLoading = false;
    bool isSavedSuccessfully = false;
    bool isError = false;

    private async Task CreateBranch()
    {
        if (string.IsNullOrWhiteSpace(BranchName) || string.IsNullOrWhiteSpace(BranchDescription)
            || !HallPrice.HasValue  || BranchImageFile == null)
        {
            showAlert = true;
            return;
        }
        else
        {
            if (BranchImageFile != null)
            {
                isLoading = true;
                Snackbar.Add("Đang tải dữ liệu!", Severity.Info);
                imgURL = await _cloudinaryService.UploadImageAsyncBlazor(BranchImageFile);
            }
            isLoading = true;

            if (!string.IsNullOrEmpty(imgURL))
            {
                isLoading = true;

                MenuEntity newBranch = new MenuEntity
                    {
                        Name = BranchName,
                        Description = BranchDescription,
                        Image = imgURL,
                        Price = HallPrice,
                        CategoryId = SelectedBranchId,
                    };

                _context.MenuEntity.Add(newBranch);
                await _context.SaveChangesAsync();
                await LoadBranches();
                StateHasChanged();
                ShowAlerts();
                Snackbar.Add("Tải dữ liệu thành công!", Severity.Success);
                await _notiService.SendNotification(getUserCurrBlazor, " thêm sảnh mới");
                isLoading = false;
                isSavedSuccessfully = true;
                BranchName = string.Empty;
                BranchDescription = string.Empty;
                HallPrice = 0;
                BranchImageFile = null;
                showAlert = false;
                isError = false;
                await jsRuntime.InvokeVoidAsync("clearInputFileText", "branchImage");
                await LoadBranches();
                await _hubContext.Clients.All.SendAsync("MenuCreated", listHall);

                StateHasChanged();
            }
            else
            {
                isLoading = false;
                isError = true;
                Snackbar.Add("Tải dữ liệu thất bại!", Severity.Error);
            }
        }

    }


    private void CancelAndDelData()
    {
        isLoading = false;
        BranchName = string.Empty;
        BranchDescription = string.Empty;
        HallPrice = 0;
        BranchImageFile = null;
        showAlert = false;
        isError = false;
    }
 

}
@if (running == true)
        {
  
            <AuthorizeView Context="Hall" Roles=@roleNameAu>
    <Authorized>
 

<a class="btn btn-primary" style="font-size:13px;padding:7px;margin-bottom:15px " data-bs-toggle="modal" data-bs-target="#createHallModal">
    Thêm thực đơn
</a>
<MudTable @key="@change" Items="@listHall" Hover="true" SortLabel="Sort By" Striped="true" Filter="new Func<MenuEntity,bool>(FilterFunc1)" Style="margin-bottom:15px">
    <ToolBarContent>
        <MudText Style="font-family:Mali" Typo="Typo.h6">Danh sách món ăn</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Tìm kiếm tên món" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Hình ảnh</MudTh>

        <MudTh><MudTableSortLabel SortBy="new Func<MenuEntity, object>(x=>x.Name)">Tên món</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MenuEntity, object>(x=>x.Price)">Giá</MudTableSortLabel></MudTh>

        <MudTh>Chức năng</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Image">
            <MudImage Src="@context.Image" Width="50" Height="50" Alt="Swedish Farm House" Elevation="25" Class="rounded-lg" />
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Price">@context.Price?.ToString("#,##0") VNĐ</MudTd>
            <MudTd>
                <MudButton Variant="MudBlazor.Variant.Outlined" StartIcon="@Icons.Material.Filled.Settings" Size="MudBlazor.Size.Small" Color="Color.Success" data-bs-toggle="modal" data-bs-target="#editHallModal" OnClick="@(() => EditBranch(@context.MenuId))">
                    Sửa
                </MudButton>
                <MudButton Variant="MudBlazor.Variant.Outlined" StartIcon="@Icons.Material.Filled.Info" Size="MudBlazor.Size.Small" Color="Color.Info" data-bs-toggle="modal" data-bs-target="#viewHallModal" OnClick="@(() => ShowDetails(@context.MenuId))">
                    Chi tiết
                </MudButton>
                <MudButton Variant="MudBlazor.Variant.Outlined" StartIcon="@Icons.Material.Filled.DeleteForever" Size="MudBlazor.Size.Small" Color="Color.Error" OnClick="@(() => ShowConfirmModal(@context.MenuId))">
                    Xóa
                </MudButton>
            </MudTd>

        </RowTemplate>

        <PagerContent>
            <MudTablePager RowsPerPageString="Số dòng mỗi trang" InfoFormat="{first_item}-{last_item} trong {all_items} trang" PageSizeOptions="new int[] { 5, 10, 25 ,50, 100 }" />
        </PagerContent>
    </MudTable>
            </Authorized>
            <NotAuthorized>
                     <h3 style="color:red">Không có quyền truy cập</h3>

            </NotAuthorized>
        </AuthorizeView>
        }
    @* modal delete mud blazor *@
    <MudMessageBox @ref="mbox" Title="Xác nhận xóa" CancelText="Hủy thao tác">
        <MessageContent>
            Dữ liệu bị xóa sẽ không thể phục hồi
        </MessageContent>
        <YesButton>
            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Xóa dữ liệu!</MudButton>
        </YesButton>
    </MudMessageBox>
@code {
    private string searchString1 = "";
    private bool FilterFunc1(MenuEntity branch) => FilterFunc(branch, searchString1);

    private bool FilterFunc(MenuEntity branch, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (branch.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
<style>
    .mud-dialog-width-sm {
        max-width: 1200px;
        width: 500px;
    }
</style>
@code {
    MudMessageBox mbox { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    private int branchIdToDelete;

    private async void ShowConfirmModal(int branchId)
    {
        // string newUrl = $"/branch-list/delete-branch/{branchId}";
        // await jsRuntime.InvokeVoidAsync("history.pushState", null, null, newUrl);
        branchIdToDelete = branchId;
        if (!CanDelete)
        {
            await jsRuntime.InvokeVoidAsync("alert", $"Không có quyền xóa");
            return;
        }
        bool? result = await mbox.Show();
        if (result == true)
        {
            await DeleteBranch(branchIdToDelete);
            Snackbar.Add("Đã xóa!", Severity.Success);
            await _notiService.SendNotification(getUserCurrBlazor, "đã xóa");
        }
        else
        {
        }
        StateHasChanged();
    }
}

@* select branch *@

@code {
    private List<MenuCategory> selectBranches = new List<MenuCategory>();

    private int SelectedBranchId { get; set; }
}


<div class="modal fade" id="viewHallModal" tabindex="-1" aria-labelledby="viewHallModalLabel" aria-hidden="true" @onclick="() => CloseMe(false)">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
            <div class="modal-header">
                <h5 class="modal-title" id="viewHallModalLabel">Chi tiết món ăn</h5>
                <button type="button" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                </button>
            </div>
            <div class="modal-body">
                <!-- Hiển thị thông tin chi nhánh -->
                <p><strong>Tên món ăn:</strong> @branchName</p>
                <p><strong>Giá:</strong> @price?.ToString("#,##0") VNĐ</p>

                <p><strong>Mô tả:</strong> @des</p>
                <p><strong>Thuộc thể loại:</strong> @branchHall</p>
                <p><strong>Hình ảnh:</strong></p>
                <img src="@img" class="img-fluid" style="max-height: 300px; width: 100%;" alt="Hình ảnh chi nhánh" />

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@* view details branch code behind *@
@code {
    @* view details branch code behind *@
    string? branchName = "";
    string? branchHall = "";
    string? des = "";
    double? price = 0;
    int? capacity = 0;
    string? img = "";
    async Task ShowDetails(int branchId)
    {
        MenuEntity? branch = _context.MenuEntity.Include(x => x.MenuCategory).FirstOrDefault(x => x.MenuId == branchId);
        if (branch != null)
        {
            branchName = branch.Name;
            des = branch.Description;
            img = branch.Image;
            price = branch.Price;
            branchHall = branch.MenuCategory.Name;
        }
    }
}


<div class="modal fade" id="editHallModal" tabindex="-1" aria-labelledby="editHallModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
            <div class="modal-header">
                <h5 class="modal-title" id="editHallModalLabel">Chỉnh sửa thực đơn</h5>
                <button type="button" @onclick="() => CloseMe(false)" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                </button>
            </div>
                @if (CanEdit)
            {
            <div class="modal-body">
                @if (showAlertCreateBranch)
                {
                    <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Cập nhật chi nhánh thành công ròi nhe!</MudAlert>
                }
                @if (showAlert)
                {
                    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" IsOpen="@showAlert" CloseIconClicked="() => showAlert = false">
                        Vui lòng nhập đầy đủ thông tin!
                    </MudAlert>
                }

                <form method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="branchName" class="form-label">Tên thực đơn</label>
                        <input type="text" class="form-control" id="branchName" @bind="updateBranchName">
                    </div>
                    <div class="mb-3">
                        <label for="branchDescription" class="form-label">Mô tả</label>
                        <textarea class="form-control" id="branchDescription" rows="3" @bind="updateDes"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="branchImageUpdate" class="form-label">Ảnh</label>
                        <InputFile id="branchImageUpdate" class="form-control" OnChange="OnInputFileChange" />
                    </div>
                    @if (!string.IsNullOrEmpty(imageUrl))
                    {
                        <div class="mb-3">
                            <img src="@imageUrl" alt="Branch Image" style="width: 100%;max-height:300px" />
                        </div>
                    }
                    <div class="mb-3">
                        <label for="price" class="form-label">Giá</label>
                        <input type="number" class="form-control" id="price" @bind="updatePrice">
                    </div>
                 
                    <div class="mb-3">
                        <label for="branchId" class="form-label">Chọn thể loại</label>
                        <select class="form-control" id="branchId" @bind="updateBranchId">
                            @foreach (var branch in selectBranches)
                            {
                                <option value="@branch.CategoryId">@branch.Name</option>
                            }
                        </select>
                    </div>
                </form>


            </div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" @onclick="CancelAndDelData" data-bs-toggle="tooltip" data-bs-placement="left" title="Xóa dữ liệu và đóng form" data-bs-dismiss="modal"><i class="fa-solid fa-caret-left" style="margin-right:5px"></i> Hủy</button>
                <a class="btn btn-success" @onclick="SaveEditChanges">
                    @if (isLoadingUpdate)
                    {
                        <i class="fa-solid fa-spinner fa-spin" style="color: white; margin-right:5px"></i>
                        <span>Đang tải ... </span>
                    }
                    else if (isSavedSuccessfully)
                    {
                        <i class="fa-solid fa-check" style="color: white; margin-right:5px"></i>
                        <span>Đã lưu thành công!</span>
                    }
                    else if (isError)
                    {
                        <i class="fa-solid fa-ban" style="margin-right:5px"></i>
                        <span>Bị lỗi hình ảnh</span>
                    }
                    else
                    {
                        <i class="fa-solid fa-plus" style="color: white; margin-right:5px"></i>
                        <span>Lưu</span>
                    }
                </a>

            </div>
            }
                    else
                    {
                        <span style="color:red;margin:10px">Không có quyền cập nhật</span>
                    }
        </div>
    </div>
</div>

@* update branch code behind *@
@code {
    @* update branch code behind *@
    MenuEntity? branchToEdit { get; set; } = new MenuEntity();

    bool isLoadingUpdate = false;
    // void GetImage(int branchId)
    // {
    //     Branch branch = _context.Branch.FirstOrDefault(b => b.BranchId == branchId);
    //     if (branch != null)
    //     {
    //         imageUrl = branch.Image;
    //     }
    // }
    string? updateBranchName = "";
    string? updateDes = "";
    double? updatePrice = 0;
    int updateBranchId = 0;
    string? updateImg = "";

    async Task EditBranch(int branchId)
    {
        _context.ChangeTracker.Clear(); // clear tracking
        branchToEdit = await _context.MenuEntity.FindAsync(branchId);
        MenuEntity? branchUpdateForm = _context.MenuEntity.Include(x => x.MenuCategory).FirstOrDefault(x => x.MenuId == branchId);
        if (branchUpdateForm != null)
        {
            updateBranchName = branchUpdateForm.Name;
            updateDes = branchUpdateForm.Description;
            updatePrice = branchUpdateForm.Price;
            updateImg = branchUpdateForm.Image;
            updateBranchId = branchUpdateForm.CategoryId;
        }
        BranchImageFile = null;
        StateHasChanged(); // Cập nhật UI
        await jsRuntime.InvokeVoidAsync("clearInputFileText", "branchImageUpdate");
    }
    async Task SaveEditChanges()
    {
        var existingBranch = _context.MenuEntity.Local.FirstOrDefault(b => b.MenuId == branchToEdit.MenuId);

        string editImgUrl = "";
        if (BranchImageFile != null)
        {
            isLoadingUpdate = true;
            Snackbar.Add("Đang tải dữ liệu!", Severity.Info);
            editImgUrl = await _cloudinaryService.UploadImageAsyncBlazor(BranchImageFile);
        }
        else if (BranchImageFile == null)
        {
            editImgUrl = branchToEdit.Image;
        }
        isLoadingUpdate = true;
        if (existingBranch != null)
        {
            isLoadingUpdate = true;

            existingBranch.Name = updateBranchName;
            existingBranch.Description = updateDes;
            existingBranch.Price = updatePrice;
            existingBranch.Image = editImgUrl;
            existingBranch.CategoryId = updateBranchId;
        }
        else
        {
            isLoadingUpdate = true;

            _context.Attach(branchToEdit);
            branchToEdit.Name = updateBranchName;
            branchToEdit.Description = updateDes;
            branchToEdit.Price = updatePrice;
            branchToEdit.Image = editImgUrl;
            branchToEdit.CategoryId = updateBranchId;
        }
        ShowAlerts();
        Snackbar.Add("Cập nhật dữ liệu thành công!", Severity.Success);
        _context.Update(branchToEdit);

        await _context.SaveChangesAsync();

        isLoadingUpdate = false;
        isSavedSuccessfully = true;
        await _notiService.SendNotification(getUserCurrBlazor, "đã cập nhật ");
        await LoadBranches();
    }


    async Task DeleteBranch(int branchId)
    {
        var branchToDelete = await _context.MenuEntity.FindAsync(branchId);
        if (branchToDelete != null)
        {
            _context.MenuEntity.Remove(branchToDelete);
            await _context.SaveChangesAsync();
            await _hubContext.Clients.All.SendAsync("MenuCreated", listHall);

            await LoadBranches();
        }
    }
}

@* get user curr *@
@* @code{
    ApplicationUser getUserCurr;

    AuthenticationState authState;
    string userCurrId;
    async Task<ApplicationUser> GetUserCurr()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        userCurrId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        getUserCurr = _context.ApplicationUser.FirstOrDefault(x => x.Id == userCurrId);
        return getUserCurr;
    }
} *@


@* init blazor *@
@code {
    ApplicationUser getUserCurrBlazor;

    List<MenuEntity> Branches { get; set; } = new List<MenuEntity>();
    [Inject] private ApplicationDbContext _context { get; set; }
    string imageUrl { get; set; }
    private List<MenuEntity> listHall { get; set; } = new List<MenuEntity>();

    static int change = 0;
    protected async Task LoadBranches()
    {
        listHall = await _context.MenuEntity.ToListAsync();
        await _hubContext.Clients.All.SendAsync("MenuCreated", listHall);
    }
    private HubConnection hubConnection;
    string roleNameAu = "";
    bool running = false;
    bool CanAdd = false;
    bool CanEdit = false;
    bool CanDelete = false;
    string roleId = "";
    protected override async Task OnInitializedAsync()
    {
        getUserCurrBlazor = await _userBlazorService.GetCurrentUser();
        if (getUserCurrBlazor == null)
        {
            NavigationManager.NavigateTo("/Identity/Account/Login?ReturnUrl=%2F");
            return;
        }
            roleId = await _authorizeService.GetRoleId(getUserCurrBlazor);
            var permissions = await _context.Permission
            .Where(p => p.RoleId == roleId && p.Type == "menu")
            .ToListAsync();
            CanAdd = permissions.Any(p => p.CanAdd);
            CanEdit = permissions.Any(p => p.CanEdit);
            CanDelete = permissions.Any(p => p.CanDelete);

        roleNameAu = await _authorizeService.UserHasPermission("menu");

        selectBranches = await _context.MenuCategory.ToListAsync();
        hubConnection = new HubConnectionBuilder()
            // .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost/myBlazorHub")) // docker
            .WithUrl(NavigationManager.ToAbsoluteUri("/myBlazorHub"))
            .Build();

        hubConnection.On<List<MenuEntity>>("MenuCreated", signalRListHall =>
        {
            InvokeAsync(() =>
            {
                listHall = signalRListHall;
                StateHasChanged();
            });
        });
        hubConnection.On<List<MenuCategory>>("MenuCateCreated", signalRListCate=>
        {
            InvokeAsync(() =>
            {
                listCate = signalRListCate;
                StateHasChanged();
            });
        });
        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started successfully blazor.");
            await LoadBranches();
            await LoadCates();
            running = true;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
        }

        await base.OnInitializedAsync();
    }
}
</MudTabPanel>
<MudTabPanel Text="Thể loại" ToolTip="Thể loại">
   
        <div class="modal fade" id="createCateModal" tabindex="-1" aria-labelledby="createCateModalLabel" aria-hidden="true" @onclick="() => CloseMe(false)">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
                    <div class="modal-header">
                        <h5 class="modal-title" id="createCateModalLabel">Tên thể loại</h5>
                        <button type="button" @onclick="() => CloseMe(false)" data-bs-dismiss="modal" aria-label="Close">
                            <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                        </button>
                    </div>
                            @if (CanAdd)
     {
                    <div class="modal-body">
                        @if (showAlertCreateBranch)
                        {
                            <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Tạo thành công!</MudAlert>
                        }
                        @if (showAlert)
                        {
                            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" IsOpen="@showAlert" CloseIconClicked="() => showAlert = false">
                                Vui lòng nhập đầy đủ thông tin!
                            </MudAlert>
                        }

                        <form method="post" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label for="branchName" class="form-label">Tên món</label>
                                <input type="text" class="form-control" id="branchName" @bind="cateName">
                            </div>
                            <div class="mb-3">
                                <label for="branchDescription" class="form-label">Mô tả</label>
                                <textarea class="form-control" id="branchDescription" rows="3" @bind="cateDescription"></textarea>
                            </div>
                        </form>

                    </div>
                    <div class="modal-footer d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" @onclick="CancelAndDelData" data-bs-toggle="tooltip" data-bs-placement="left" title="Xóa dữ liệu và đóng form" data-bs-dismiss="modal"><i class="fa-solid fa-caret-left" style="margin-right:5px"></i> Hủy</button>
                        <a class="btn btn-success" @onclick="CreateCate">
                            @if (isLoading)
                            {
                                <i class="fa-solid fa-spinner fa-spin" style="color: white; margin-right:5px"></i>
                                <span>Đang tải... </span>
                            }
                            else if (isSavedSuccessfully)
                            {
                                <i class="fa-solid fa-check" style="color: white; margin-right:5px"></i>
                                <span>Đã lưu thành công!</span>
                            }
                            else
                            {
                                <i class="fa-solid fa-plus" style="color: white; margin-right:5px"></i>
                                <span>Lưu</span>
                            }
                        </a>

                    </div>
                    }
                    else
                    {
                        <span style="color:red;margin:10px">Không có quyền thêm</span>
                    }
                </div>
            </div>
        </div>
@code{
    private string? cateName { get; set; }
    private string? cateDescription { get; set; }
    private async Task CreateCate()
    {
        if (string.IsNullOrWhiteSpace(cateName) || string.IsNullOrWhiteSpace(cateDescription))
        {
            showAlert = true;
            return;
        }
        else
        {
            isLoading = true;
            Snackbar.Add("Đang tải dữ liệu!", Severity.Info);
        }
            isLoading = true;
        if (!string.IsNullOrEmpty(cateName))
        {
            isLoading = true;
            MenuCategory newCate = new MenuCategory
            {
                Name = cateName,
                Description = cateDescription,
            };

        _context.MenuCategory.Add(newCate);
            await _context.SaveChangesAsync();
            await LoadCates();
            StateHasChanged();
            ShowAlerts();
            Snackbar.Add("Tải dữ liệu thành công!", Severity.Success);
            isLoading = false;
            cateName = string.Empty;
            cateDescription = string.Empty;
            showAlert = false;
            isError = false;
            await jsRuntime.InvokeVoidAsync("clearInputFileText", "branchImage");
            await LoadCates();
            await _hubContext.Clients.All.SendAsync("MenuCateCreated", listCate);

            StateHasChanged();
        }
        else
        {
            isLoading = false;
            isError = true;
            Snackbar.Add("Tải dữ liệu thất bại!", Severity.Error);
        }
    }
    private async void ShowConfirmModalCate(int cateId)
    {
        // string newUrl = $"/branch-list/delete-branch/{branchId}";
        // await jsRuntime.InvokeVoidAsync("history.pushState", null, null, newUrl);
            if (!CanDelete)
            {
            await jsRuntime.InvokeVoidAsync("alert", $"Không có quyền xóa");
            return;
            }
        bool? result = await mbox.Show();
        if (result == true)
        {
        await DeleteCate(cateId);
        Snackbar.Add("Đã xóa!", Severity.Success);
        }
        StateHasChanged();
    }
        async Task DeleteCate(int cateId)
    {
            var cateToDelete = await _context.MenuCategory.FindAsync(cateId);
            var menuEntitiesToDelete = await _context.MenuEntity.Where(e => e.CategoryId == cateId).ToListAsync();
            // Lấy danh sách các MenuId của các món ăn sẽ bị xóa
            var menuIdsToDelete = menuEntitiesToDelete.Select(me => me.MenuId);
            var orderMenusToUpdate = await _context.OrderMenu.Where(o => menuIdsToDelete.Contains(o.MenuId.Value)).ToListAsync();

        if (cateToDelete != null)
        {
            foreach (var orderMenu in orderMenusToUpdate)
            {
                _context.OrderMenu.Remove(orderMenu);
            }
            _context.MenuEntity.RemoveRange(menuEntitiesToDelete);
            _context.MenuCategory.Remove(cateToDelete);
                await _context.SaveChangesAsync();
        await _hubContext.Clients.All.SendAsync("MenuCateCreated", listCate);

        await LoadCates();
        }
    }
    List<MenuCategory> menuCategories { get; set; } = new List<MenuCategory>();
    private List<MenuCategory> listCate { get; set; } = new List<MenuCategory>();
    protected async Task LoadCates()
    {
        listCate = await _context.MenuCategory.ToListAsync();
        await _hubContext.Clients.All.SendAsync("MenuCateCreated", listCate);
    }
            private string searchString2 = "";
    private bool FilterFunc3(MenuCategory branch) => FilterFun2(branch, searchString2);

    private bool FilterFun2(MenuCategory branch, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (branch.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    void EditCate(int cateId)
    {

    }
   
    void ShowDetailsCate(int cateId)
    {

    }
}

@if (running == true)
        {
  
            <AuthorizeView Context="Cate" Roles=@roleNameAu>
    <Authorized>
                    <a class="btn btn-primary" style="font-size:13px;padding:7px;margin-bottom:15px " data-bs-toggle="modal" data-bs-target="#createCateModal">
                        Thêm thể loại
                    </a>
            <MudTable Items="@listCate" Hover="true" SortLabel="Sort By" Striped="true" Filter="new Func<MenuCategory,bool>(FilterFunc3)" Style="margin-bottom:15px">
                <ToolBarContent>
                    <MudText Style="font-family:Mali" Typo="Typo.h6">Danh sách thể loại</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString2" Placeholder="Tìm kiếm thể loại" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<MenuCategory, object>(x=>x.Name)">Tên thể loại</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<MenuCategory, object>(x=>x.Description)">Mô tả</MudTableSortLabel></MudTh>

                    <MudTh>Chức năng</MudTh>
                </HeaderContent>
                <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd>
                        <MudButton Variant="MudBlazor.Variant.Outlined" StartIcon="@Icons.Material.Filled.DeleteForever" Size="MudBlazor.Size.Small" Color="Color.Error" OnClick="@(() => ShowConfirmModalCate(@context.CategoryId))">
                            Xóa
                        </MudButton>
                    </MudTd>

                </RowTemplate>

                <PagerContent>
                    <MudTablePager RowsPerPageString="Số dòng mỗi trang" InfoFormat="{first_item}-{last_item} trong {all_items} trang" PageSizeOptions="new int[] { 5, 10, 25 ,50, 100 }" />
                </PagerContent>
            </MudTable>
                    </Authorized>
                    <NotAuthorized>
                        <h3 style="color:red">Không có quyền truy cập</h3>

                    </NotAuthorized>
                </AuthorizeView>
        }
            @* modal delete mud blazor *@
            <MudMessageBox @ref="mbox" Title="Xác nhận xóa" CancelText="Hủy thao tác">
                <MessageContent>
                    Dữ liệu bị xóa sẽ không thể phục hồi
                </MessageContent>
                <YesButton>
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Xóa dữ liệu!</MudButton>
                </YesButton>
            </MudMessageBox>
</MudTabPanel>
</MudTabs>