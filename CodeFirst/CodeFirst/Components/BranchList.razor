@page "/branch-list"
@using CloudinaryDotNet
@using CloudinaryDotNet.Actions
@using CodeFirst.Data
@using CodeFirst.Models.Entities
@using CodeFirst.Service
@using Microsoft.AspNetCore.Components.Web.Extensions
@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject CloudinaryService _cloudinaryService;
@using Microsoft.AspNetCore.Components.Forms
<PageTitle>Counter</PageTitle>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
@inject ISnackbar SnackbarService
@inject ISnackbar Snackbar
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Trang chủ", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Chi nhánh", href: "/branch-list", icon: Icons.Material.Filled.LocationCity),
    };
}

<h1>Quản lý chi nhánh</h1>

<style>
    .btn {
        color: white;
        margin-left: 5px;
    }

    i {
        margin-right: 3px;
    }

    label:hover{
        background-color:transparent;
        
    }
</style>
<a class="btn btn-primary" style="font-size:15px;padding:10px;background-color:#594AE2 " data-bs-toggle="modal" data-bs-target="#createBranchModal">
        Thêm chi nhánh mới
    </a>




<div class="modal fade" id="createBranchModal" tabindex="-1" aria-labelledby="createBranchModalLabel" aria-hidden="true" @onclick="() => CloseMe(false)">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
            <div class="modal-header">
                <h5 class="modal-title" id="createBranchModalLabel">Thêm chi nhánh mới</h5>
                <button type="button" @onclick="() => CloseMe(false)" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                </button>
            </div>
            <div class="modal-body">
                @if (showAlertCreateBranch)
                {
                    <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Tạo chi nhánh thành công ròi nhe!</MudAlert>
                }
                <form method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="branchName" class="form-label">Tên chi nhánh</label>
                        <input type="text" class="form-control" id="branchName" @bind="BranchName">
                    </div>
                    <div class="mb-3">
                        <label for="branchDescription" class="form-label">Mô tả</label>
                        <textarea class="form-control" id="branchDescription" rows="3" @bind="BranchDescription"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="branchImage" class="form-label">Ảnh</label>
                        <InputFile id="branchImage" class="form-control" OnChange="OnInputFileChange" />
                    </div>
                    <div class="mb-3">
                        <label for="branchAddress" class="form-label">Địa chỉ</label>
                        <input type="text" class="form-control" id="branchAddress" @bind="BranchAddress">
                    </div>
                    <div class="mb-3">
                        <label for="branchPhone" class="form-label">Điện thoại</label>
                        <input type="text" class="form-control" id="branchPhone" @bind="BranchPhone">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="() => CloseMe(false)" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" @onclick="CreateBranch">Lưu</button>
            </div>
        </div>
    </div>
</div>


@code {
    private bool showAlertCreateBranch = false;

    private void CloseMe(bool value)
    {
        if (!value)
        {
            showAlertCreateBranch = false;
        }
    }

    private void ShowAlerts()
    {
        showAlertCreateBranch = true;
    }
}





@code {
    private string? BranchName { get; set; }
    private string? BranchDescription { get; set; }
    private string? BranchAddress { get; set; }
    private string? BranchPhone { get; set; }
    // Phương thức để tải ảnh lên Cloudinary

    private IBrowserFile BranchImageFile { get; set; }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        BranchImageFile = e.File;
    }


    private async Task CreateBranch()
    {
        Snackbar.Add("Đang tải dữ liệu!", Severity.Info);

        string imgURL = await _cloudinaryService.UploadImageAsyncBlazor(BranchImageFile);

        Branch newBranch = new Branch
            {
                Name = BranchName,
                Description = BranchDescription,
                Image = imgURL,
                Address = BranchAddress,
                Phone = BranchPhone
            };

        _context.Branch.Add(newBranch);
        await _context.SaveChangesAsync();

        // gọi lại LoadBranches để cập nhật db
        await LoadBranches();
        ShowAlerts();
        Snackbar.Add("Tải dữ liệu thành công!", Severity.Success);

        BranchName = string.Empty;
        BranchDescription = string.Empty;
        BranchAddress = string.Empty;
        BranchPhone = string.Empty;
        BranchImageFile = null;
    }
}

<table class="table">
    <thead>
        <tr>
            <th>
                Tên
            </th>
            <th>
                Điện thoại
            </th>
            <th>
                Địa chỉ
            </th>
            <th>
                Hình ảnh
            </th>

            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Branches)
        {
            <tr>
                <td>
                    @item.Name
                </td>
                <td>
                    @item.Phone
                </td>
                <td>
                    @item.Address
                </td>
                <td style="width:15%">
                    <img src="@item.Image" class="rounded float-start" style="width:100%; height:10rem">
                </td>
                <td>
                    <button class="btn btn-outline-info" @onclick="() => EditBranch(item.BranchId)">Sửa</button>
                    <button class="btn btn-outline-success" @onclick="() => ShowDetails(item.BranchId)">Chi tiết</button>
                    <button data-bs-toggle="modal" data-bs-target="#confirmModal" class="btn btn-outline-danger" @onclick="() => ShowConfirmModal(item.BranchId)">Xóa</button>

                </td>
                <td>
                    @if (item.IsLocked)
                    {
                        <button class="btn btn-success" @onclick="() => UnlockBranch(item.BranchId)"><i class="icofont-key"></i>  Mở khóa</button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="() => LockBranch(item.BranchId)"><i class="icofont-ui-block"></i>  Tạm khóa</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>            


@code {
    [Inject] private IDialogService DialogService { get; set; }
    private int branchIdToDelete;

    private async void ShowConfirmModal(int branchId)
    {
        branchIdToDelete = branchId;
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result == true)
        {
            await DeleteBranch(branchIdToDelete);
            Snackbar.Add("Đã xóa chi nhánh gòi đóa!", Severity.Success);
        }
        else
        {
        }
        StateHasChanged();
    }
}



@code {
    List<Branch> Branches { get; set; } = new List<Branch>();
    [Inject] private ApplicationDbContext _context { get; set; }
  


    protected async Task LoadBranches()
    {
        var branchService = new BranchService(_context);
        Branches = await branchService.GetBranchesAsync(); 
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadBranches();
    }

    

    // Method to edit a branch
    void EditBranch(int branchId)
    {
        // Navigate to the edit branch page with the provided branch ID
        // Example: NavigationManager.NavigateTo($"/branches/edit/{branchId}");
    }

    // Method to show details of a branch
    void ShowDetails(int branchId)
    {
        // Navigate to the details page of the provided branch ID
        // Example: NavigationManager.NavigateTo($"/branches/details/{branchId}");
    }

    // Method to delete a branch
    async Task DeleteBranch(int branchId)
    {
        var branchToDelete = await _context.Branch.FindAsync(branchId);
        if (branchToDelete != null)
        {
            _context.Branch.Remove(branchToDelete);
            await _context.SaveChangesAsync();
            await LoadBranches();
        }
    }


    // Method to unlock a branch
    void UnlockBranch(int branchId)
    {
        // Perform unlock operation here
        // Example: await SomeDataService.UnlockBranch(branchId);
    }

    // Method to lock a branch
    void LockBranch(int branchId)
    {
        // Perform lock operation here
        // Example: await SomeDataService.LockBranch(branchId);
    }
}
