@page "/branch-list"
@using CloudinaryDotNet
@using CloudinaryDotNet.Actions
@using CodeFirst.Data
@using CodeFirst.Models.Entities
@using CodeFirst.Service
@using Microsoft.AspNetCore.Components.Web.Extensions
@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject CloudinaryService _cloudinaryService;
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
<PageTitle>Counter</PageTitle>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
@inject ISnackbar SnackbarService
@inject ISnackbar Snackbar
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Trang chủ", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Chi nhánh", href: "/branch-list", icon: Icons.Material.Filled.LocationCity),
    };
}

<h1>Quản lý chi nhánh</h1>

<style>
    .btn {
        color: white;
        margin-left: 5px;
        outline: none;
    }
    .btn:hover{
        color:white;
    }
    i {
        margin-right: 3px;
    }

    label:hover{
        background-color:transparent;
        
    }
</style>
<a class="btn btn-primary" style="font-size:15px;padding:10px;background-color:#594AE2 " data-bs-toggle="modal" data-bs-target="#createBranchModal">
        Thêm chi nhánh mới
    </a>




<div class="modal fade" id="createBranchModal" tabindex="-1" aria-labelledby="createBranchModalLabel" aria-hidden="true" @onclick="() => CloseMe(false)">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
            <div class="modal-header">
                <h5 class="modal-title" id="createBranchModalLabel">Thêm chi nhánh mới</h5>
                <button type="button" @onclick="() => CloseMe(false)" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                </button>
            </div>
            <div class="modal-body">
                @if (showAlertCreateBranch)
                {
                    <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Tạo chi nhánh thành công ròi nhe!</MudAlert>
                }
                @if (showAlert)
                {
                    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" IsOpen="@showAlert" CloseIconClicked="() => showAlert = false">
                        Vui lòng nhập đầy đủ thông tin!
                    </MudAlert>

                }
          
                <form method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="branchName" class="form-label">Tên chi nhánh</label>
                        <input type="text" class="form-control" id="branchName" @bind="BranchName">
                    </div>
                    <div class="mb-3">
                        <label for="branchDescription" class="form-label">Mô tả</label>
                        <textarea class="form-control" id="branchDescription" rows="3" @bind="BranchDescription"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="branchImage" class="form-label">Ảnh</label>
                        <InputFile id="branchImage" class="form-control" OnChange="OnInputFileChange" />
                    </div>
                    <div class="mb-3">
                        <label for="branchAddress" class="form-label">Địa chỉ</label>
                        <input type="text" class="form-control" id="branchAddress" @bind="BranchAddress">
                    </div>
                    <div class="mb-3">
                        <label for="branchPhone" class="form-label">Điện thoại</label>
                        <input type="text" class="form-control" id="branchPhone" @bind="BranchPhone">
                    </div>
                </form>


            </div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" @onclick="CancelAndDelData" data-bs-toggle="tooltip" data-bs-placement="left" title="Xóa dữ liệu và đóng form" data-bs-dismiss="modal"><i class="fa-solid fa-caret-left" style="margin-right:5px"></i> Hủy</button>
                <a  class="btn btn-success" @onclick="CreateBranch">
                    @if (isLoading)
                    {
                        <i class="fa-solid fa-spinner fa-spin" style="color: white; margin-right:5px"></i>
                        <span>Chờ chút xíu đang tải nè ... </span>
                    }
                    else if (isSavedSuccessfully)
                    {
                        <i class="fa-solid fa-check" style="color: white; margin-right:5px"></i>
                        <span>Đã lưu thành công!</span>
                     }
                    else if (isError)
                    {
                        <i class="fa-solid fa-ban" style="margin-right:5px"></i>
                        <span>Bị lỗi hình ảnh ròi!</span>
                    }
                    else
                    {
                        <i class="fa-solid fa-plus" style="color: white; margin-right:5px"></i>
                        <span>Lưu</span>
                    }
                </a>

            </div>
        </div>
    </div>
</div>





@code {
    private bool showAlertCreateBranch = false;

    private void CloseMe(bool value)
    {
        if (!value)
        {
            showAlertCreateBranch = false;
            isSavedSuccessfully = false;
        }
    }

    private void ShowAlerts()
    {
        showAlertCreateBranch = true;
    }
}




@* Create func *@
@code {
    private string? BranchName { get; set; }
    private string? BranchDescription { get; set; }
    private string? BranchAddress { get; set; }
    private string? BranchPhone { get; set; }
    private bool showAlert = false;
    private IBrowserFile BranchImageFile { get; set; }
    string imgURL = "";
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        BranchImageFile = e.File;
    }
    bool isLoading = false;
    bool isSavedSuccessfully = false;
    bool isError = false;

    private async Task CreateBranch()
    {
        if (string.IsNullOrWhiteSpace(BranchName) || string.IsNullOrWhiteSpace(BranchDescription)
            || string.IsNullOrWhiteSpace(BranchAddress) || string.IsNullOrWhiteSpace(BranchPhone) || BranchImageFile == null)
        {
            showAlert = true;
            return;
        }
        else
        {
            if(BranchImageFile != null)
            {
                isLoading = true;
                Snackbar.Add("Đang tải dữ liệu!", Severity.Info);
                imgURL = await _cloudinaryService.UploadImageAsyncBlazor(BranchImageFile);
            }
            isLoading = true;

            if (!string.IsNullOrEmpty(imgURL))
            {
                isLoading = true;

                Branch newBranch = new Branch
                    {
                        Name = BranchName,
                        Description = BranchDescription,
                        Image = imgURL,
                        Address = BranchAddress,
                        Phone = BranchPhone
                    };

                _context.Branch.Add(newBranch);
                await _context.SaveChangesAsync();

                // gọi lại LoadBranches để cập nhật db
                await LoadBranches();
                ShowAlerts();
                Snackbar.Add("Tải dữ liệu thành công!", Severity.Success);
                isLoading = false;
                isSavedSuccessfully = true;
                BranchName = string.Empty;
                BranchDescription = string.Empty;
                BranchAddress = string.Empty;
                BranchPhone = string.Empty;
                BranchImageFile = null;
                showAlert = false;
                isError = false;
            }
            else
            {
                isLoading = false;
                isError = true;
                Snackbar.Add("Tải dữ liệu thất bại!", Severity.Error);
            }
        }

    }


    private void CancelAndDelData()
    {
        isLoading = false;
        BranchName = string.Empty;
        BranchDescription = string.Empty;
        BranchAddress = string.Empty;
        BranchPhone = string.Empty;
        BranchImageFile = null;
        showAlert = false;
        isError = false;
    }
}

<table class="table">
    <thead>
        <tr>
            <th>
                Tên
            </th>
            <th>
                Điện thoại
            </th>
            <th>
                Địa chỉ
            </th>
            <th>
                Hình ảnh
            </th>

            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Branches)
        {
            <tr>
                <td>
                    @item.Name
                </td>
                <td>
                    @item.Phone
                </td>
                <td>
                    @item.Address
                </td>
                <td style="width:15%">
                    <img src="@item.Image" class="rounded float-start" style="width:100%; height:10rem">
                </td>
                <td>
                    <a data-bs-toggle="modal" data-bs-target="#editBranchModal" class="btn btn-outline-info" @onclick="() => EditBranch(item.BranchId)">Sửa</a>
                    <a data-bs-toggle="modal" data-bs-target="#viewBranchModal" class="btn btn-outline-success" @onclick="() => ShowDetails(item.BranchId)">Chi tiết</a>

                    <button  class="btn btn-outline-danger" @onclick="() => ShowConfirmModal(item.BranchId)">Xóa</button>

                </td>
                <td>
                    @if (item.IsLocked)
                    {
                        <button class="btn btn-success" @onclick="() => UnlockBranch(item.BranchId)"><i class="icofont-key"></i>  Mở khóa</button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="() => LockBranch(item.BranchId)"><i class="icofont-ui-block"></i>  Tạm khóa</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>            
<MudMessageBox @ref="mbox" Title="Xác nhận xóa" CancelText="Hủy thao tác">
    <MessageContent>
        Dữ liệu bị xóa sẽ không thể phục hồi
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Xóa dữ liệu!</MudButton>
    </YesButton>
</MudMessageBox>
<style>
    .mud-dialog-width-sm{
        max-width:1200px;
        width:500px;
    }
</style>
@code {
    MudMessageBox mbox { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    private int branchIdToDelete;

    private async void ShowConfirmModal(int branchId)
    {
        branchIdToDelete = branchId;
        bool? result = await mbox.Show();

        if (result == true)
        {
            await DeleteBranch(branchIdToDelete);
            Snackbar.Add("Đã xóa chi nhánh gòi đóa!", Severity.Success);
        }
        else
        {
        }
        StateHasChanged();
    }
}


<div class="modal fade" id="viewBranchModal" tabindex="-1" aria-labelledby="viewBranchModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
            <div class="modal-header">
                <h5 class="modal-title" id="viewBranchModalLabel">Chi tiết chi nhánh</h5>
                <button type="button" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                </button>
            </div>
            <div class="modal-body">
                <!-- Hiển thị thông tin chi nhánh -->
                <p><strong>Tên chi nhánh:</strong> @branchName</p>
                <p><strong>Số điện thoại:</strong> @phone</p>
                <p><strong>Địa chỉ:</strong> @address</p>
                <p><strong>Mô tả:</strong> @des</p>
                <p><strong>Hình ảnh:</strong></p>
                <img src="@img" class="img-fluid" style="max-height: 300px; width: 100%;" alt="Hình ảnh chi nhánh" />
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@code{
    string? branchName = "";
    string? des = "";
    string? phone = "";
    string? address = "";
    string? img = "";
    void ShowDetails(int branchId)
    {
        Branch? branch =  _context.Branch.FirstOrDefault(x => x.BranchId == branchId);
        if(branch != null)
        {
            branchName = branch.Name;
            des = branch.Description;
            phone = branch.Phone;
            address = branch.Address;
            img = branch.Image;
        }
     
    }
}


<div class="modal fade" id="editBranchModal" tabindex="-1" aria-labelledby="editBranchModalLabel" aria-hidden="true" @onclick="() => CloseMe(false)">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px; ">
            <div class="modal-header">
                <h5 class="modal-title" id="editBranchModalLabel">Chỉnh sửa chi nhánh</h5>
                <button type="button" @onclick="() => CloseMe(false)" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-circle-xmark" style="font-size:30px;color: #c50202;"></i>
                </button>
            </div>
            <div class="modal-body">
                @if (showAlertCreateBranch)
                {
                    <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Cập nhật chi nhánh thành công ròi nhe!</MudAlert>
                }
                @if (showAlert)
                {
                    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" IsOpen="@showAlert" CloseIconClicked="() => showAlert = false">
                        Vui lòng nhập đầy đủ thông tin!
                    </MudAlert>

                }

                <form method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="branchName" class="form-label">Tên chi nhánh</label>
                        <input type="text" class="form-control" id="branchName" @bind="branchToEdit.Name">
                    </div>
                    <div class="mb-3">
                        <label for="branchDescription" class="form-label">Mô tả</label>
                        <textarea class="form-control" id="branchDescription" rows="3" @bind="branchToEdit.Description"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="branchImageUpdate" class="form-label">Ảnh</label>
                        <InputFile id="branchImageUpdate" class="form-control" OnChange="OnInputFileChange"  />
                    </div>
                    @if (!string.IsNullOrEmpty(imageUrl))
                    {
                        <div class="mb-3">
                            <img src="@imageUrl" alt="Branch Image" style="width: 100%;max-height:300px" />
                        </div>
                    }
                    <div class="mb-3">
                        <label for="branchAddress" class="form-label">Địa chỉ</label>
                        <input type="text" class="form-control" id="branchAddress" @bind="branchToEdit.Address">
                    </div>
                    <div class="mb-3">
                        <label for="branchPhone" class="form-label">Điện thoại</label>
                        <input type="text" class="form-control" id="branchPhone" @bind="branchToEdit.Phone">
                    </div>
                </form>


            </div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" @onclick="CancelAndDelData" data-bs-toggle="tooltip" data-bs-placement="left" title="Xóa dữ liệu và đóng form" data-bs-dismiss="modal"><i class="fa-solid fa-caret-left" style="margin-right:5px"></i> Hủy</button>
                <a class="btn btn-success" @onclick="SaveEditChanges">
                    @if (isLoadingUpdate)
                    {
                        <i class="fa-solid fa-spinner fa-spin" style="color: white; margin-right:5px"></i>
                        <span>Chờ chút xíu đang tải nè ... </span>
                    }
                    else if (isSavedSuccessfully)
                    {
                        <i class="fa-solid fa-check" style="color: white; margin-right:5px"></i>
                        <span>Đã lưu thành công!</span>
                    }
                    else if (isError)
                    {
                        <i class="fa-solid fa-ban" style="margin-right:5px"></i>
                        <span>Bị lỗi hình ảnh ròi!</span>
                    }
                    else
                    {
                        <i class="fa-solid fa-plus" style="color: white; margin-right:5px"></i>
                        <span>Lưu</span>
                    }
                </a>

            </div>
        </div>
    </div>
</div>


@code {
    List<Branch> Branches { get; set; } = new List<Branch>();
    [Inject] private ApplicationDbContext _context { get; set; }
    Branch branchToEdit { get; set; } = new Branch();
    string imageUrl { get; set; }

    protected async Task LoadBranches()
    {
        var branchService = new BranchService(_context);
        Branches = await branchService.GetBranchesAsync(); 
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadBranches();
    }
    bool isLoadingUpdate = false;
    void GetImage(int branchId)
    {
        Branch branch = _context.Branch.FirstOrDefault(b => b.BranchId == branchId);
        if (branch != null)
        {
            imageUrl = branch.Image;
        }
    }
    async Task EditBranch(int branchId)
    {
        branchToEdit = await _context.Branch.FindAsync(branchId);
        BranchImageFile = null;
        StateHasChanged(); // Cập nhật UI
        await jsRuntime.InvokeVoidAsync("clearInputFileText", "branchImageUpdate");
    }
    async Task SaveEditChanges()
    {
        var existingBranch = _context.Branch.Local.FirstOrDefault(b => b.BranchId == branchToEdit.BranchId);
        string editName = branchToEdit.Name;
        string editAddress = branchToEdit.Address;
        string editDes = branchToEdit.Description;
        string editPhone = branchToEdit.Phone;
        string editImgUrl = "";
        if (BranchImageFile != null)
        {
            isLoadingUpdate = true;
            Snackbar.Add("Đang tải dữ liệu!", Severity.Info);
            editImgUrl = await _cloudinaryService.UploadImageAsyncBlazor(BranchImageFile);
        }
        else if(BranchImageFile == null)
        {
            editImgUrl = branchToEdit.Image;
        }
        isLoadingUpdate = true;
        if (existingBranch != null)
        {
            isLoadingUpdate = true;

            existingBranch.Name = editName;
            existingBranch.Description = editDes;
            existingBranch.Address = editAddress;
            existingBranch.Phone = editPhone;
            existingBranch.Image = editImgUrl;
        }
        else
        {
            isLoadingUpdate = true;

            _context.Attach(branchToEdit);
            branchToEdit.Name = editName;
            branchToEdit.Description = editDes;
            branchToEdit.Address = editAddress;
            branchToEdit.Phone = editPhone;
            branchToEdit.Image = editImgUrl;
        }
        ShowAlerts();
        Snackbar.Add("Cập nhật dữ liệu thành công!", Severity.Success);
        await _context.SaveChangesAsync();
        isLoadingUpdate = false;

        isSavedSuccessfully = true;

        await LoadBranches();
    }

  

    // Method to delete a branch
    async Task DeleteBranch(int branchId)
    {
        var branchToDelete = await _context.Branch.FindAsync(branchId);
        if (branchToDelete != null)
        {
            _context.Branch.Remove(branchToDelete);
            await _context.SaveChangesAsync();
            await LoadBranches();
        }
    }


    // Method to unlock a branch
    void UnlockBranch(int branchId)
    {
        // Perform unlock operation here
        // Example: await SomeDataService.UnlockBranch(branchId);
    }

    // Method to lock a branch
    void LockBranch(int branchId)
    {
        // Perform lock operation here
        // Example: await SomeDataService.LockBranch(branchId);
    }
}
