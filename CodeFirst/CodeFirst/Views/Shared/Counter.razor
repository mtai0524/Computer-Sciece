@page "/counter"
@using CodeFirst.Data
@using CodeFirst.Models.Entities
@using CodeFirst.Service

<PageTitle>Counter</PageTitle>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "#", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Videos", href: "#", icon: Icons.Material.Filled.VideoLibrary),
        new BreadcrumbItem("Create", href: null, disabled: true, icon: Icons.Material.Filled.Create)
    };
}
<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<MudProgressCircular Color="Color.Default" Indeterminate="true" />
<div Class="d-flex justify-space-around flex-wrap mt-4">
    <MudBadge Content="3" Overlap="true" Class="mx-6 my-4">
        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default" />
    </MudBadge>
    <MudBadge Content="100" Color="Color.Primary" Overlap="true" Class="mx-6 my-4">
        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default" />
    </MudBadge>
    <MudBadge Icon="@Icons.Material.Filled.Lock" Color="Color.Error" Overlap="true" Bordered="true" Class="mx-6 my-4">
        <MudButton Color="Color.Error" Variant="MudBlazor.Variant.Filled" DisableElevation="true">Security Issues</MudButton>
    </MudBadge>
    <MudBadge Dot="true" Color="Color.Info" Class="mx-6 my-4">
        <MudText>Bug Reports</MudText>
    </MudBadge>
</div>
<CodeFirst.Components.ProgressBar></CodeFirst.Components.ProgressBar>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}

    <MudTable Items="@Elements" Hover="true" SortLabel="Sort By">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Name)">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<Branch, object>(x=>x.BranchId)">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Branch, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Address)">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Description)">Mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Name</MudTd>
            <MudTd DataLabel="Sign">@context.BranchId</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Position">@context.Address</MudTd>
            <MudTd DataLabel="Molar mass">@context.Description</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>

<MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable sorting on the Sign Column</MudSwitch>
@code {
    List<Branch> Branches { get; set; } = new List<Branch>();
    [Inject]
    private ApplicationDbContext _context { get; set; }


    private bool enabled = true;
    private IEnumerable<Branch> Elements = new List<Branch>();

    protected override async Task OnInitializedAsync()
    {
        var branchService = new BranchService(_context);
        Elements = await branchService.GetBranchesAsync();
    }
}