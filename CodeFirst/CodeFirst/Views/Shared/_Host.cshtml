@page
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    // Layout = "_Layout";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";

}
<component type="typeof(App)" render-mode="ServerPrerendered" />

<script>
    function showText() {
        return alert("hello");
    }
</script>
<script>
    window.adjustTextareaHeight = function (textareaId) {
        var textarea = document.getElementById(textareaId);
        // Kiểm tra xem textarea có rỗng hay không
        if (textarea.value.trim() !== "") {
            // Nếu có nội dung, cập nhật chiều cao tối thiểu dựa trên chiều cao nội dung
            var contentHeight = textarea.scrollHeight;
            if (contentHeight < 200) {
                textarea.style.minHeight = contentHeight + 'px';
            } else {
                // Đặt chiều cao tối thiểu là 200px nếu chiều cao nội dung lớn hơn hoặc bằng 200px
                textarea.style.minHeight = '200px';
            }
        } else {
            // Nếu không có nội dung, đặt chiều cao tối thiểu là 20px
            textarea.style.minHeight = '35px';
        }
    };
</script>


<script>
    function clearInputFileText(inputId) {
        var input = document.getElementById(inputId);
        if (input) {
            input.value = '';
        }
    }
    function showModal(modalId) {
        const modal = document.getElementById(modalId);
        modal.style.display = 'block';
    }

    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        modal.style.display = 'none';
    }

    document.addEventListener('click', function (event) {
        if (event.target.classList.contains('close')) {
            closeModal(event.target.closest('.modal').id);
        }
    });
   
    async function updateTaskPosition(taskId, position, projectId) {
        try {
            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ position: position, projectId: projectId })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            console.log('Vị trí tác vụ đã được cập nhật thành công');
        } catch (error) {
            console.error('Lỗi khi cập nhật vị trí tác vụ:', error);
        }
    }

    function drapAndDrop() {
        var columns = document.querySelectorAll('.project-column');
        columns.forEach(function (column) {
            new Sortable(column, {
                group: 'tasks',
                animation: 150,
                ghostClass: 'task-placeholder',
                filter: '.project-column-heading__title',
                onEnd: async function (evt) {
                    var tasks = evt.to.querySelectorAll('.task');
                    var numTasks = tasks.length;

                    // Xác định project mới mà task được kéo thả đến
                    var newProjectId = evt.to.closest('.project-column').getAttribute('data-project-id');
                    console.log("newProjectId: " + newProjectId);

                    // Tính toán vị trí mới của mỗi phần tử dựa trên sự kiện kéo thả
                    for (var i = 0; i < numTasks; i++) {
                        var task = tasks[i];
                        var taskId = task.getAttribute('data-task-id');
                        var newPosition = Array.from(task.parentNode.children).indexOf(task);
                        // Cập nhật vị trí của tác vụ
                        await updateTaskPosition(taskId, newPosition, newProjectId);
                    }
                }
            });
        });
    }

      // Tạo một MutationObserver để theo dõi sự thay đổi trong DOM
    var observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes) {
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === 1 && node.matches('.project-column')) {
                        initProjectTasks();
                    }
                });
            }
        });
    });

    // Cấu hình MutationObserver để theo dõi sự thay đổi trong toàn bộ document
    observer.observe(document.body, { childList: true, subtree: true });

    // Chạy initProjectTasks cho các phần tử .project-column hiện có
    initProjectTasks();



    function initProjectTasks() {
        // Tạo một Sortable instance cho mỗi cột
        var columns = document.querySelectorAll('.project-column');
        columns.forEach(function (column) {
            new Sortable(column, {
                group: 'tasks', // Group cho phép kéo thả giữa các cột
                animation: 150, // Thời gian animation khi di chuyển
                ghostClass: 'task-placeholder', // Class của phần tử placeholder khi kéo thả
                filter: '.project-column-heading__title',
                onEnd: async function (evt) {
                    var tasks = evt.to.querySelectorAll('.task');
                    var numTasks = tasks.length;

                    // Xác định project mới mà task được kéo thả đến
                    var newProjectId = evt.to.closest('.project-column').getAttribute('data-project-id');

                    console.log("newProjectId: " + newProjectId);

                    // Tính toán vị trí mới của mỗi phần tử dựa trên sự kiện kéo thả
                    for (var i = 0; i < numTasks; i++) {
                        var task = tasks[i];
                        var taskId = task.getAttribute('data-task-id');
                        var newPosition = Array.from(task.parentNode.children).indexOf(task);

                        // Cập nhật vị trí của tác vụ
                        await updateTaskPosition(taskId, newPosition, newProjectId);
                    }
                }
            });
        });
    }


</script>
